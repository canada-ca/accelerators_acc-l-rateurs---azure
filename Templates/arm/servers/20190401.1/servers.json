{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmObject": {
            "type": "object",
            "metadata": {
                "description": "Object of MS firewall objects."
            }
        },
        "containerSasToken": {
            "type": "string"
        },
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located including a trailing '/'"
            },
            "defaultValue": "[deployment().properties.templateLink.uri]"
        }
    },
    "variables": {
        "backupItemName": "[concat('vm;iaasvmcontainerv2;', resourceGroup().name,';',parameters('vmObject').vm.computerName)]",
        "domainJoinURI": "[concat(uri(parameters('_artifactsLocation'), 'nested/domainjoin.json'), parameters('containerSasToken'))]",
        "linuxDomainJoinURI": "[concat(uri(parameters('_artifactsLocation'), 'nested/linuxdomainjoin.json'), parameters('containerSasToken'))]",
        "virtualMachineURI": "[concat(uri(parameters('_artifactsLocation'), 'nested/virtualmachine.json'), parameters('containerSasToken'))]",
        "encryptDisksLinuxURI": "[concat(uri(parameters('_artifactsLocation'), 'nested/encryptVMDisksLinux.json'), parameters('containerSasToken'))]",
        "encryptDisksWindowsURI": "[concat(uri(parameters('_artifactsLocation'), 'nested/encryptVMDisksWindows.json'), parameters('containerSasToken'))]",
        "omsAgentForLinuxURI": "[concat(uri(parameters('_artifactsLocation'), 'nested/omsAgentForLinux.json'), parameters('containerSasToken'))]",
        "iisExtensionName": "iisExtension",
        "iisConfigurationFunction": "PrepareWebServer.ps1\\PrepareWebServer",
        "iisConfigurationScript": "PrepareWebServer.ps1.zip",
        "iisForceUpdateTag": "1.0",
        "iisModuleUrl": "[concat(uri(parameters('_artifactsLocation'), concat('DSC','/', variables('iisConfigurationScript'))), parameters('containerSasToken'))]"
    },
    "functions": [
        {
            "namespace": "pspc",
            "members": {
                "arrayASGConfig": {
                    "parameters": [
                        {
                            "name": "ASGArray",
                            "type": "array"
                        }
                    ],
                    "output": {
                        "type": "array",
                        "value": "[parameters('ASGArray')]"
                    }
                },
                "getResourceGroupID": {
                    "parameters": [
                        {
                            "name": "resourceGroupName",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[uniqueString(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('resourceGroupName')))]"
                    }
                },
                "getUniqueKeyvaultName": {
                    "parameters": [
                        {
                            "name": "keyVaultName",
                            "type": "string"
                        },
                        {
                            "name": "resourceGroupID",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[if(contains(parameters('keyvaultName'), '[unique]'), replace(parameters('keyvaultName'), '[unique]', parameters('resourceGroupID')), parameters('keyvaultName'))]"
                    }
                },
                "getValidKeyvaultName": {
                    "parameters": [
                        {
                            "name": "keyvaultName",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[if(greater(length(parameters('keyvaultName')),24), concat(substring(parameters('keyvaultName'), 0, 24)), parameters('keyvaultName'))]"
                    }
                }
            }
        }
    ],
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat('Deploy-', parameters('vmObject').vm.computerName)]",
            "apiVersion": "2018-02-01",
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkInterfaces.name)]",
                "[concat(parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkInterfaces.name, '-makeIPStatic')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('virtualMachineURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "adminPassword": {
                        "reference": {
                            "keyVault": {
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('vmObject').vmKeyVault.keyVaultResourceGroupName, '/providers/Microsoft.KeyVault/vaults/', pspc.getValidKeyvaultName(pspc.getUniqueKeyvaultName(parameters('vmObject').vmKeyVault.keyVaultName, pspc.getResourceGroupID(parameters('vmObject').vmKeyVault.keyVaultResourceGroupName))))]"
                            },
                            "secretName": "[parameters('vmObject').vm.adminPassword]"
                        }
                    },
                    "vmObject": { "value": "[parameters('vmObject')]" },
                    "keyVaultId": {"value": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('vmObject').vmKeyVault.keyVaultResourceGroupName, '/providers/Microsoft.KeyVault/vaults/', pspc.getValidKeyvaultName(pspc.getUniqueKeyvaultName(parameters('vmObject').vmKeyVault.keyVaultName, pspc.getResourceGroupID(parameters('vmObject').vmKeyVault.keyVaultResourceGroupName))))]"},
                }
            }
        },
        {
            "condition": "[contains(parameters('vmObject').vm,'shutdownConfig')]",
            "name": "[concat('shutdown-computevm-', parameters('vmObject').vm.computerName)]",
            "type": "Microsoft.DevTestLab/schedules",
            "apiVersion": "2017-04-26-preview",
            "tags": "[parameters('vmObject').tagValues]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ],
            "properties": {
                "status": "[parameters('vmObject').vm.shutdownConfig.autoShutdownStatus]",
                "taskType": "ComputeVmShutdownTask",
                "dailyRecurrence": {
                    "time": "[parameters('vmObject').vm.shutdownConfig.autoShutdownTime]"
                },
                "timeZoneId": "[parameters('vmObject').vm.shutdownConfig.autoShutdownTimeZone]",
                "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmObject').vm.computerName)]",
                "notificationSettings": {
                    "status": "[parameters('vmObject').vm.shutdownConfig.autoShutdownNotificationStatus]",
                    "timeInMinutes": "30"
                }
            }
        },
        {
            "name": "[concat(parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkInterfaces.name)]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2018-08-01",
            "tags": "[parameters('vmObject').tagValues]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkSecurityGroups.name)]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[concat(subscription().id, '/resourceGroups/', parameters('vmObject').networkInterfaces.vnetResourceGroupName, '/providers/Microsoft.Network/virtualNetworks/', parameters('vmObject').networkInterfaces.vnetName, '/subnets/', parameters('vmObject').networkInterfaces.subnetName)]"
                            },
                            "privateIPAllocationMethod": "[if(contains(parameters('vmObject').networkInterfaces, 'privateIPAddress'), 'Static', 'Dynamic')]",
                            "privateIPAddress": "[if(contains(parameters('vmObject').networkInterfaces, 'privateIPAddress'), parameters('vmObject').networkInterfaces.privateIPAddress, json('null'))]"
                        }
                    }
                ],
                "enableAcceleratedNetworking": "[parameters('vmObject').networkInterfaces.acceleratedNetworking]",
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkSecurityGroups.name))]"
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkInterfaces.name, '-makeIPStatic')]",
            "apiVersion": "2017-08-01",
            "dependsOn": [
                "[concat(parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkInterfaces.name)]"
            ],
            "condition": "[not(contains(parameters('vmObject').networkInterfaces, 'privateIPAddress'))]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Network/networkInterfaces",
                            "name": "[concat(parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkInterfaces.name)]",
                            "apiVersion": "2018-03-01",
                            "location": "[resourceGroup().location]",
                            "properties": {
                                "ipConfigurations": [
                                    {
                                        "name": "ipconfig1",
                                        "properties": {
                                            "privateIPAllocationMethod": "Static",
                                            "privateIPAddress": "[reference(concat('Microsoft.Network/networkInterfaces/', concat(parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkInterfaces.name))).ipConfigurations[0].properties.privateIPAddress]",
                                            "subnet": {
                                                "id": "[concat(subscription().id, '/resourceGroups/', parameters('vmObject').networkInterfaces.vnetResourceGroupName, '/providers/Microsoft.Network/virtualNetworks/', parameters('vmObject').networkInterfaces.vnetName, '/subnets/', parameters('vmObject').networkInterfaces.subnetName)]"
                                            },
                                            "applicationSecurityGroups": "[if(contains(parameters('vmObject').vm, 'applicationSecurityGroups'), pspc.arrayASGConfig(parameters('vmObject').vm.applicationSecurityGroups), json('null'))]",
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        {
            "name": "[concat(parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkSecurityGroups.name)]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2018-01-01",
            "tags": "[parameters('vmObject').tagValues]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": []
            }
        },
        {
            "condition": "[contains(parameters('vmObject').vm,'backupConfig')]",
            "apiVersion": "2017-05-10",
            "name": "[concat(parameters('vmObject').vm.computerName, '-' , 'BackupIntent')]",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[if(contains(parameters('vmObject').vm,'backupConfig'), parameters('vmObject').vm.backupConfig.existingBackupVaultRG, 'nothing')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "name": "[concat(parameters('vmObject').vm.backupConfig.existingBackupVaultName, '/','Azure', '/', variables('backupItemName'))]",
                            "apiVersion": "2017-07-01",
                            "type": "Microsoft.RecoveryServices/vaults/backupFabrics/backupProtectionIntent",
                            "properties": {
                                "friendlyName": "[concat(parameters('vmObject').vm.computerName, 'BackupIntent')]",
                                "protectionIntentItemType": "AzureResourceItem",
                                "policyId": "[resourceId(parameters('vmObject').vm.backupConfig.existingBackupVaultRG, 'Microsoft.RecoveryServices/vaults/backupPolicies', parameters('vmObject').vm.backupConfig.existingBackupVaultName, parameters('vmObject').vm.backupConfig.existingBackupPolicy)]",
                                "sourceResourceId": "[resourceId(resourceGroup().name, 'Microsoft.Compute/virtualMachines', concat(parameters('vmObject').vm.computerName))]"
                            }
                        }
                    ]
                }
            },
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ]
        },
        {
            "condition": "[contains(parameters('vmObject').vm,'antimalwareInfo')]",
            "name": "[concat('microsoft.antimalware-windows-20180924102643', parameters('vmObject').vm.computerName)]",
            "apiVersion": "2015-01-01",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://gallery.azure.com/artifact/20161101/microsoft.antimalware-windows-arm.1.0.2/Artifacts/MainTemplate.json"
                },
                "parameters": {
                    "vmName": {
                        "value": "[parameters('vmObject').vm.computerName]"
                    },
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "ExclusionsPaths": {
                        "value": "[parameters('vmObject').vm.antimalwareInfo.exclusionPaths]"
                    },
                    "ExclusionsExtensions": {
                        "value": "[parameters('vmObject').vm.antimalwareInfo.exclusionExtensions]"
                    },
                    "ExclusionsProcesses": {
                        "value": "[parameters('vmObject').vm.antimalwareInfo.exclusionProcesses]"
                    },
                    "RealtimeProtectionEnabled": {
                        "value": "[parameters('vmObject').vm.antimalwareInfo.realtimeProtectionEnabled]"
                    },
                    "ScheduledScanSettingsIsEnabled": {
                        "value": "[parameters('vmObject').vm.antimalwareInfo.scheduledScanSettingsEnabled]"
                    },
                    "ScheduledScanSettingsScanType": {
                        "value": "[parameters('vmObject').vm.antimalwareInfo.scheduledScanSettingsType]"
                    },
                    "ScheduledScanSettingsDay": {
                        "value": "[parameters('vmObject').vm.antimalwareInfo.scheduledScanSettingsDay]"
                    },
                    "ScheduledScanSettingsTime": {
                        "value": "[parameters('vmObject').vm.antimalwareInfo.scheduledScanSettingsTime]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ]
        },
        {
            "condition": "[contains(parameters('vmObject'),'domainObject')]",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat('DomainJoin-', parameters('vmObject').vm.computerName)]",
            "apiVersion": "2018-02-01",
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('domainJoinURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "adPassword": {
                        "reference": {
                            "keyVault": {
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('vmObject').vmKeyVault.keyVaultResourceGroupName, '/providers/Microsoft.KeyVault/vaults/', pspc.getValidKeyvaultName(pspc.getUniqueKeyvaultName(parameters('vmObject').vmKeyVault.keyVaultName, pspc.getResourceGroupID(parameters('vmObject').vmKeyVault.keyVaultResourceGroupName))))]"
                            },
                            "secretName": "[parameters('vmObject').domainObject.domainUserSecretName]"
                        }
                    },
                    "vmObject": { "value": "[parameters('vmObject')]" }
                }
            }
        },
        {
            "condition": "[contains(parameters('vmObject'),'omsAgentForLinux')]",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat('OmsAgentForLinux-', parameters('vmObject').vm.computerName)]",
            "apiVersion": "2018-02-01",
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('omsAgentForLinuxURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmObject": { "value": "[parameters('vmObject')]" }
                }
            }
        },
        {
            "condition": "[contains(parameters('vmObject'),'AADLoginForLinux')]",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat('Install-LinuxDomainJoin-Extension-', parameters('vmObject').vm.computerName)]",
            "apiVersion": "2018-02-01",
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('linuxDomainJoinURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmObject": { "value": "[parameters('vmObject')]" }
                }
            }
        },
        {
            "condition": "[contains(parameters('vmObject').vm,'linuxScript')]",
            "name": "[concat(parameters('vmObject').vm.computerName,'/LinuxCustomScript')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "location": "[resourceGroup().location]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {},
                "protectedSettings": "[parameters('vmObject').vm.linuxScript.protectedSettings]"
            }
        },
        {
            "condition": "[contains(parameters('vmObject').vm,'encryptDisks')]",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat('EncryptWindows-', parameters('vmObject').vm.computerName)]",
            "apiVersion": "2018-02-01",
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('encryptDisksWindowsURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmObject": { "value": "[parameters('vmObject')]" }
                }
            }
        },
        {
            "condition": "[contains(parameters('vmObject').vm,'encryptDisksLinux')]",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat('EncryptLinux-', parameters('vmObject').vm.computerName)]",
            "apiVersion": "2018-02-01",
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('encryptDisksLinuxURI')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmObject": { "value": "[parameters('vmObject')]" }
                }
            }
        },
        {
            "condition": "[contains(parameters('vmObject').vm,'WebServerSettings')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vmObject').vm.computerName,'/', variables('iisExtensionName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ],
            "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.19",
                "autoUpgradeMinorVersion": true,
                "forceUpdateTag": "[variables('iisForceUpdateTag')]",
                "settings": {
                    "modulesUrl": "[variables('iisModuleUrl')]",
                    "configurationFunction": "[variables('iisConfigurationFunction')]",
                    "properties": {
                        "nodeName": "[parameters('vmObject').vm.computerName]",
                        "webDeployPackage": "[parameters('vmObject').vm.WebServerSettings.webDeployPackage]",
                        "certStoreName": "[parameters('vmObject').vm.WebServerSettings.certificateStoreName]",
                        "certDomain": "[parameters('vmObject').vm.WebServerSettings.certificateDomain]"
                    }
                },
                "protectedSettings": {}
            }
        },
        {
            "condition": "[contains(parameters('vmObject').vm,'DSCSettings')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vmObject').vm.computerName,'/', 'DSCExtensionName')]",
            "apiVersion": "2019-03-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Deploy-', parameters('vmObject').vm.computerName)]"
            ],
            "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.77",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "wmfVersion": "latest",
                    "configuration": "[parameters('vmObject').vm.DSCSettings]"
                },
                "protectedSettings": {
                    "configurationUrlSasToken": "[parameters('containerSasToken')]"
                }
            }
        }
    ],
    "outputs": {
        "nic": {
            "type": "object",
            "value": "[reference(concat(parameters('vmObject').vm.computerName, '-', parameters('vmObject').networkInterfaces.name))]"
        },
        "WebServerSet": {
            "type": "bool",
            "value": "[contains(parameters('vmObject').vm,'WebServerSettings')]"
        },
        "iisUrl": {
            "type": "string",
            "value": "[variables('iisModuleUrl')]"
        }
    }
}